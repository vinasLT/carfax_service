"""update carfax

Revision ID: a4daee270ea5
Revises: 86f9a0beaaae
Create Date: 2025-06-24 19:23:22.298669

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a4daee270ea5'
down_revision: Union[str, Sequence[str], None] = '86f9a0beaaae'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_search_history_id'), table_name='user_search_history')
    op.drop_table('user_search_history')
    op.drop_index(op.f('ix_find_for_me_id'), table_name='find_for_me')
    op.drop_table('find_for_me')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_table('user')
    op.alter_column('carfax_purchase', 'vin',
               existing_type=sa.VARCHAR(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('carfax_purchase', 'vin',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_table('user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('telegram_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='user_pkey'),
    sa.UniqueConstraint('telegram_id', name='user_telegram_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('find_for_me',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('make', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('model', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('year_from', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('year_to', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('budget_from', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('budget_to', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('specific_message', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('response_auction', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('response_lot_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_responded', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('find_for_me_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('find_for_me_pkey'))
    )
    op.create_index(op.f('ix_find_for_me_id'), 'find_for_me', ['id'], unique=False)
    op.create_table('user_search_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('lot_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('auction_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('user_search_history_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('user_search_history_pkey'))
    )
    op.create_index(op.f('ix_user_search_history_id'), 'user_search_history', ['id'], unique=False)
    # ### end Alembic commands ###
